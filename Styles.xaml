<ResourceDictionary x:Class="QAAdapterAddOn.Styles"
                    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008">

  <SolidColorBrush x:Key="brshButtonNormal">DarkGray</SolidColorBrush>
  <SolidColorBrush x:Key="brshButtonHover">Gray</SolidColorBrush>
  <SolidColorBrush x:Key="textColor">Black</SolidColorBrush>
  <SolidColorBrush x:Key="gridTextColor">Black</SolidColorBrush>
  <SolidColorBrush x:Key="highlightColor">LightGray</SolidColorBrush>
  <Style x:Key="headerLabel" TargetType="{x:Type Label}">
    <Setter Property="Control.BorderBrush" Value="Gray"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Control.Background" Value="Transparent"/>
    <Setter Property="Control.Padding" Value="0"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ContentControl.Content" Value="{Binding}"/>
  </Style>
  <Style x:Key="itemViewStyle" TargetType="{x:Type Label}">
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="Control.Foreground" Value="#FF676A66"/>
    <Setter Property="Control.BorderBrush" Value="Gray"/>
    <Setter Property="Control.BorderThickness" Value="0,0,2,0"/>
    <Setter Property="Control.Padding" Value="20,0,0,0"/>
  </Style>
  <Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}" TargetType="{x:Type ScrollViewer}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ScrollViewer}">
          <Grid Background="{TemplateBinding Control.Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*"/>
              <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*"/>
              <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <DockPanel Margin="{TemplateBinding Control.Padding}">
              <ScrollViewer DockPanel.Dock="Top" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                            Focusable="false">
                <GridViewHeaderRowPresenter Margin="0" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                            ColumnHeaderContainerStyle="{Binding Path=TemplatedParent.View.ColumnHeaderContainerStyle, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplate="{Binding Path=TemplatedParent.View.ColumnHeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplateSelector="{Binding Path=TemplatedParent.View.ColumnHeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"
                                            AllowsColumnReorder="{Binding Path=TemplatedParent.View.AllowsColumnReorder, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContextMenu="{Binding Path=TemplatedParent.View.ColumnHeaderContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderToolTip="{Binding Path=TemplatedParent.View.ColumnHeaderToolTip, RelativeSource={RelativeSource TemplatedParent}}">
                  <GridViewRowPresenterBase.Columns>
                    <Binding Path="TemplatedParent.View.Columns" RelativeSource="{RelativeSource TemplatedParent}"/>
                  </GridViewRowPresenterBase.Columns>
                </GridViewHeaderRowPresenter>
              </ScrollViewer>
              <ScrollContentPresenter Name="PART_ScrollContentPresenter" KeyboardNavigation.DirectionalNavigation="Local"
                                      CanContentScroll="true" CanHorizontallyScroll="false" CanVerticallyScroll="false"/>
            </DockPanel>
            <ScrollBar Name="PART_HorizontalScrollBar" Orientation="Horizontal" Grid.Row="1"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                       Value="{TemplateBinding ScrollViewer.HorizontalOffset}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"/>
            <ScrollBar Name="PART_VerticalScrollBar" Grid.Column="1"
                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                       Value="{TemplateBinding ScrollViewer.VerticalOffset}"
                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"/>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="listViewStyleNoneBorder" TargetType="{x:Type ListView}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ListBox.SelectionMode" Value="Single"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="Control.BorderThickness" Value="0"/>
    <Setter Property="Control.BorderBrush" Value="Transparent"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Border" BorderThickness="0" BorderBrush="{StaticResource brshButtonNormal}"
                  Background="#FFFFFF">
            <ScrollViewer Background="#FFF7F7F5" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Value="{StaticResource brshButtonHover}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="listViewStyle" TargetType="{x:Type ListView}">
    <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
    <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
    <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    <Setter Property="ListBox.SelectionMode" Value="Single"/>
    <Setter Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
    <Setter Property="FrameworkElement.HorizontalAlignment" Value="Stretch"/>
    <Setter Property="Control.BorderThickness" Value="1"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource brshButtonNormal}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListView}">
          <Border Name="Border" BorderThickness="1" BorderBrush="{StaticResource brshButtonNormal}"
                  Background="Transparent">
            <ScrollViewer Background="Transparent" Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter/>
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.IsGrouping" Value="true">
              <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="Border" Value="{StaticResource brshButtonHover}" Property="Border.BorderBrush"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type GridViewColumnHeader}">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
          <Grid>
            <Border x:Name="HeaderBorder" BorderThickness="0,0,0,0">
              <ContentPresenter x:Name="HeaderContent" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
            </Border>
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="FocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Margin="2" SnapsToDevicePixels="true"
                     Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1"
                     StrokeDashArray="1 2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>
  <Style x:Key="OptionMarkFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true"
           Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1"
           StrokeDashArray="1 2"/>
                </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <SolidColorBrush x:Key="OptionMark.MouseOver.Background" Color="#FFF3F9FF"/>
  <SolidColorBrush x:Key="OptionMark.MouseOver.Border" Color="#FF5593FF"/>
  <SolidColorBrush x:Key="OptionMark.MouseOver.Glyph" Color="#FF212121"/>
  <SolidColorBrush x:Key="OptionMark.Disabled.Background" Color="#FFE6E6E6"/>
  <SolidColorBrush x:Key="OptionMark.Disabled.Border" Color="#FFBCBCBC"/>
  <SolidColorBrush x:Key="OptionMark.Disabled.Glyph" Color="#FF707070"/>
  <SolidColorBrush x:Key="OptionMark.Pressed.Background" Color="#FFD9ECFF"/>
  <SolidColorBrush x:Key="OptionMark.Pressed.Border" Color="#FF3C77DD"/>
  <SolidColorBrush x:Key="OptionMark.Pressed.Glyph" Color="#FF212121"/>
  <SolidColorBrush x:Key="OptionMark.Static.Glyph" Color="#FF212121"/>
  <Style x:Key="mainCheckBoxStyle" TargetType="{x:Type CheckBox}">
    <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    <Setter Property="Control.Background" Value="{StaticResource OptionMark.Static.Background}"/>
    <Setter Property="Control.BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
        <Setter Property="Control.Foreground" 
    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="true">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Border x:Name="checkBoxBorder" BorderBrush="{StaticResource brshButtonNormal}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    Background="{TemplateBinding Control.Background}"
                    HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" Margin="1"
                    VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}">
              <Grid x:Name="markGrid">
                <Path x:Name="optionMark"
                      Data="F1 M 9.97498,1.22334 L 4.6983,9.09834 4.52164,9.09834 0,5.19331 1.27664,3.52165 4.255,6.08833 8.33331,1.52588E-05 9.97498,1.22334 Z"
                      Fill="{StaticResource OptionMark.Static.Glyph}" Margin="1" Opacity="0" Stretch="None"/>
                <Rectangle x:Name="indeterminateMark" Fill="{StaticResource OptionMark.Static.Glyph}" Margin="2" Opacity="0"/>
              </Grid>
            </Border>
            <ContentPresenter x:Name="contentPresenter" Grid.Column="1" Focusable="false"
                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                              Margin="{TemplateBinding Control.Padding}" RecognizesAccessKey="true"
                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"/>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="ContentControl.HasContent" Value="true">
              <Setter Value="{StaticResource OptionMarkFocusVisual}" Property="FrameworkElement.FocusVisualStyle"/>
              <Setter Property="Control.Padding" Value="4,-1,0,0"/>
            </Trigger>
            <Trigger Property="UIElement.IsMouseOver" Value="true">
              <Setter TargetName="checkBoxBorder" Value="{StaticResource OptionMark.MouseOver.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="checkBoxBorder" Value="{StaticResource brshButtonHover}" Property="Border.BorderBrush"/>
              <Setter TargetName="optionMark" Value="{StaticResource OptionMark.MouseOver.Glyph}" Property="Shape.Fill"/>
              <Setter TargetName="indeterminateMark" Value="{StaticResource OptionMark.MouseOver.Glyph}"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="false">
              <Setter TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Background}"
                      Property="Border.Background"/>
              <Setter TargetName="checkBoxBorder" Value="{StaticResource OptionMark.Disabled.Border}"
                      Property="Border.BorderBrush"/>
              <Setter TargetName="optionMark" Value="{StaticResource OptionMark.Disabled.Glyph}" Property="Shape.Fill"/>
              <Setter TargetName="indeterminateMark" Value="{StaticResource OptionMark.Disabled.Glyph}"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ButtonBase.IsPressed" Value="true">
              <Setter TargetName="checkBoxBorder" Property="Border.Background" Value="LightGray"/>
              <Setter TargetName="checkBoxBorder" Value="{StaticResource brshButtonHover}" Property="Border.BorderBrush"/>
              <Setter TargetName="optionMark" Value="{StaticResource OptionMark.Pressed.Glyph}" Property="Shape.Fill"/>
              <Setter TargetName="indeterminateMark" Value="{StaticResource OptionMark.Pressed.Glyph}"
                      Property="Shape.Fill"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="1"/>
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="0"/>
            </Trigger>
            <Trigger Value="{x:Null}" Property="ToggleButton.IsChecked">
              <Setter TargetName="optionMark" Property="UIElement.Opacity" Value="0"/>
              <Setter TargetName="indeterminateMark" Property="UIElement.Opacity" Value="1"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>